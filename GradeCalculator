# create dictionaries and lists
student = {}
weights = {}


def addGrades():
  category = raw_input('What grading category will this fall under?: ')
  weight = int(input('What percentage of your grade?: '))
  grades = [] # local because list will refresh when new one is made
  print "Input 'done' when done."
  while True:
    try: # any input that isn't an int will end the loop
      userInput = input('Enter Grade:')
      grades.append(int(userInput))
    except:
      student[category] = grades
      break
  student[category] = grades
  weights[category] = weight
  # lists are given the same key to keep them related

def calculateGrades():
  weightedAvg = 0
  for i in student:
    total = 0
    for x in student[i]:
      total += x
      avg = total / len(student[i])
    weightedAvg += avg * weights[i] / 100
  return weightedAvg
    

user = raw_input('Are you calculating your final grade? (y/n):')
if user == 'y':
  answer = raw_input('Do you have grades to input?')
  while True: # ongoing loop while there are more grades to add
    if answer == 'y' or answer == 'yes':
      addGrades() # fresh list of grades are made
    else:
      break
    answer = raw_input('Do you have more grades?')
  print 'Your final grade is: ', calculateGrades()
  
else:
  user = raw_input("Are you trying to find a grade needed? (y/n):")
  if user == 'y':
    answer = raw_input('Do you have grades to input? (y/n): ')
  while True: # ongoing loop while there are more grades to add
    if answer == 'y' or answer == 'yes':
      addGrades() # fresh list of grades are made
    else:
      break
    answer = raw_input('Do you have more grades? (y/n): ')
  
  ideal = float(input('What grade are you looking for?: '))
  given = 0
  for i in weights:
    given += weights[i]
  final_weight = 100 - given
  needed = (ideal - calculateGrades()) / (final_weight / 100)
  print 'You need at least a(n)', needed



# future goals:
# fix errors 'Does this look correct?'
# convert to GPA
# implement classes
